import { createClient } from '@supabase/supabase-js';
import sharp from 'sharp';

export default async function handler(req, res) {
  // CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Headers', 'authorization, x-client-info, apikey, content-type');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');

  if (req.method === 'OPTIONS') {
    return res.status(200).send('ok');
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { imageUrl, interiorStyle, roomId } = req.body;
    if (!imageUrl || !interiorStyle || !roomId) {
      return res.status(400).json({ error: 'Missing required parameters: imageUrl, interiorStyle, and roomId are required' });
    }

    const stabilityApiKey = process.env.STABILITY_API_KEY;
    const supabaseUrl = process.env.SB_URL;
    const supabaseServiceKey = process.env.SB_SERVICE_ROLE_KEY;

    if (!stabilityApiKey || !supabaseUrl || !supabaseServiceKey) {
      return res.status(500).json({ error: 'Missing required environment variables.' });
    }

    // Test Stability AI API key
    const accountResponse = await fetch('https://api.stability.ai/v1/user/account', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${stabilityApiKey}`,
        'Accept': 'application/json',
      },
    });
    if (!accountResponse.ok) {
      const errorText = await accountResponse.text();
      return res.status(500).json({ error: `Stability AI API key validation failed: ${accountResponse.status} - ${errorText}` });
    }

    // Download the original image
    const imageResponse = await fetch(imageUrl);
    if (!imageResponse.ok) {
      return res.status(400).json({ error: `Failed to fetch original image: ${imageResponse.status}` });
    }
    const imageBuffer = Buffer.from(await imageResponse.arrayBuffer());

    // Resize image to 1024x1024 using sharp
    const resizedImageBuffer = await sharp(imageBuffer)
      .resize(1024, 1024, { fit: 'cover' })
      .png()
      .toBuffer();

    // Prepare form data for Stability AI using formdata-node
const { FormData, File } = await import('formdata-node');
const formData = new FormData();
formData.set('init_image', new File([resizedImageBuffer], 'init.png', { type: 'image/png' }));

// ULTRA-CONSERVATIVE prompt focusing only on surface changes
const prompt = `Redecorate this room in ${interiorStyle.toLowerCase()} style. PRESERVE: exact room shape, all walls, ceiling, floor, windows, doors, room size, camera angle. CHANGE ONLY: paint colors, furniture style, fabric textures, lighting fixtures, decorations, artwork. Same room, different styling only. Photorealistic ${interiorStyle} interior.`;

formData.append('text_prompts[0][text]', prompt);
formData.append('text_prompts[0][weight]', '1');

// More comprehensive negative prompt to prevent structural changes
const negativePrompt = `changing room layout, altering walls, moving doors, changing windows, different room size, altered ceiling, modified floor plan, changing architectural structure, adding rooms, removing walls, different perspective, distorted proportions, changing room dimensions, structural modifications, building changes, cartoon, painting, sketch, blurry, low quality, unrealistic, oversaturated, artificial`;

formData.append('text_prompts[1][text]', negativePrompt);
formData.append('text_prompts[1][weight]', '-1');

// Key settings for maximum structure preservation - AGGRESSIVE APPROACH
formData.append('init_image_mode', 'IMAGE_STRENGTH');
formData.append('image_strength', '0.15'); // Much lower - minimal deviation from original
formData.append('cfg_scale', '10'); // Higher - stronger prompt adherence
formData.append('samples', '1');
formData.append('steps', '50'); // More steps for better control

// Additional settings for better control (if supported by your API version)
formData.append('seed', Math.floor(Math.random() * 1000000)); // For reproducibility
formData.append('style_preset', 'photographic'); // If available - ensures realistic output

    // Call Stability AI API
    const stabilityResponse = await fetch('https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/image-to-image', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${stabilityApiKey}`,
        'Accept': 'application/json',
        // Do NOT set Content-Type; fetch will set it automatically for FormData
      },
      body: formData,
    });
    if (!stabilityResponse.ok) {
      const errorText = await stabilityResponse.text();
      return res.status(500).json({ error: `Stability AI generation failed: ${stabilityResponse.status} - ${errorText}` });
    }
    const result = await stabilityResponse.json();
    if (!result.artifacts || result.artifacts.length === 0) {
      return res.status(500).json({ error: 'No image generated by Stability AI.' });
    }
    const imageBase64 = result.artifacts[0].base64;
    const generatedImageBuffer = Buffer.from(imageBase64, 'base64');

    // Upload to Supabase Storage
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    const fileName = `transformed_${roomId}_${Date.now()}.png`;
    const filePath = `transformed/${fileName}`;
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('room-images')
      .upload(filePath, generatedImageBuffer, {
        contentType: 'image/png',
        upsert: true,
        cacheControl: '3600',
      });
    if (uploadError) {
      return res.status(500).json({ error: `Failed to upload transformed image: ${uploadError.message}` });
    }
    const { data: { publicUrl } } = supabase.storage.from('room-images').getPublicUrl(filePath);
    // Update room record
    const { error: updateError } = await supabase
      .from('rooms')
      .update({
        transformed_image_url: publicUrl,
        interior_style: interiorStyle,
      })
      .eq('id', roomId);
    if (updateError) {
      return res.status(500).json({ error: `Failed to update room record: ${updateError.message}` });
    }
    return res.status(200).json({
      success: true,
      transformedImageUrl: publicUrl,
      interiorStyle,
      roomId,
      message: 'Room transformation completed successfully',
      creditsUsed: 1,
    });
  } catch (error) {
    return res.status(500).json({ error: error.message });
  }
}

// comment